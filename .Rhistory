#defining a matrix sum function
Msum <- function(a,b)
{
s = 0
for (i in 1:22)
{
s <- s + a[i]*b[i]
}
return(s)
} ##Note: This can be vectorized
# Msum <- function(a,b)
# {
#   sum(a*b)
# }
for (i in 1:r)
{
for (t in 1:T)
{
if ((M[t] <= 1) & (M[t] >= -1) & (x[t] >= 0) & (y[t] >= 0) & (z[t] >= 0) & (x[t] <= L) & (y[t] <= L) & (z[t] <= L))
{
#first assign by width the component for each interaction
U[t, 1,] <- c(0,1,-1,0)
U[t, 2,] <- c(0,0,0,0)
U[t, 3,] <- c(0,0,0,0)
U[t, 4,] <- c(0,0,0,0)
U[t, 5,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 6,] <- c(0,-1,1,0)
U[t, 7,] <- c(0,0,0,0)
U[t, 8,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 9,] <- c(0,0,0,0)
U[t, 10,] <- c(0,0,0,0)
U[t, 11,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 12,] <- c(0,-1,0,1)
U[t, 13,] <- c(0,0,0,0)
U[t, 14,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
U[t, 15,] <- c(0,0,0,0)
U[t, 16,] <- c(0,0,0,0)
U[t, 17,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
U[t, 18,] <- c(0,1,0,-1)
U[t, 19,] <- c(0,0,0,0)
U[t, 20,] <- c(0,0,0,0)
U[t, 21,] <- c(0,0,0,0)
U[t, 22,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
#assign probabilities to each time step
P[t,1] <- (1 - Bp - Bm)*phi1*n[t]*m[t]*x[t]/(x[t]+y[t])
P[t,2] <- (1 - Bp - Bm)*phi1*n[t]**2*x[t]/(x[t]+y[t])
P[t,3] <- (1 - Bp - Bm)*(1-phi1)*n[t]*x[t]/(x[t]+y[t])
P[t,4] <- Bp*n[t]*x[t]/(x[t]+y[t])
P[t,5] <- Bm*n[t]*x[t]/(x[t]+y[t])
P[t,6] <- (1 - Bp - Bm)*phi2*n[t]**2*y[t]/(x[t]+y[t])
P[t,7] <- (1 - Bp - Bm)*phi2*n[t]*m[t]*y[t]/(x[t]+y[t])
P[t,8] <- (1 - Bp - Bm)*(1-phi2)*(1-lp)*n[t]*y[t]/(x[t]+y[t])
P[t,9] <- (1 - Bp - Bm)*(1-phi2)*lp*n[t]*y[t]/(x[t]+y[t])
P[t,10] <- Bp*y[t]/(x[t]+y[t])
P[t,11] <- Bm*y[t]/(x[t]+y[t])
P[t,12] <- (1 - Bp - Bm)*phi2*m[t]**2*y[t]/(z[t]+y[t])
P[t,13] <- (1 - Bp - Bm)*phi2*n[t]*m[t]*y[t]/(z[t]+y[t])
P[t,14] <- (1 - Bp - Bm)*(1-phi2)*(1-lm)*m[t]*y[t]/(z[t]+y[t])
P[t,15] <- (1 - Bp - Bm)*(1-phi2)*lm*m[t]*y[t]/(z[t]+y[t])
P[t,16] <-  Bm*y[t]/(z[t]+y[t])
P[t,17] <-  Bp*y[t]/(z[t]+y[t])
P[t,18] <- (1 - Bp - Bm)*phi1*n[t]*m[t]*z[t]/(z[t]+y[t])
P[t,19] <- (1 - Bp - Bm)*phi1*m[t]**2*z[t]/(z[t]+y[t])
P[t,20] <- (1 - Bp - Bm)*(1-phi1)*m[t]*z[t]/(z[t]+y[t])
P[t,21] <- Bm*m[t]*z[t]/(z[t]+y[t])
P[t,22] <- Bp*m[t]*z[t]/(z[t]+y[t])
if (t < T)
{
#displacement vector equations
M[t+1] <- M[t] + dt*Msum(U[t,,1],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,1]/N, sqrt(P[t,]))/sqrt(N)
x[t+1] <- x[t] + dt*Msum(U[t,,3],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,3]/N, sqrt(P[t,]))/sqrt(N)
y[t+1] <- y[t] + dt*Msum(U[t,,2],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,2]/N, sqrt(P[t,]))/sqrt(N)
z[t+1] <- z[t] + dt*Msum(U[t,,4],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,4]/N, sqrt(P[t,]))/sqrt(N)
n[t+1] <- (M[t+1]+1)/2
m[t+1] <- 1 - n[t+1]
}
}
else
{
if (t < T)
{
M[t+1] <- M[t]
n[t+1] <- n[t]
m[t+1] <- m[t]
x[t+1] <- x[t]
y[t+1] <- y[t]
z[t+1] <- z[t]
}
}
}
S[,i] <- M
}
return (mean(S[T,]))
}
eg <- expand.grid(
Phi1 = c(0, 0.2, 0.6),
Phi2 = c(0, 0.2, 0.6),
# varying some:
BP = seq(0, 1, by = 0.05),
BM = seq(0, 1, by = 0.05),
# holding some constant:
L = 0.3,
N = 30,
# Columns for outcomes:
out = NA
)
eg$out[i] <- dVM(eg$Phi1[i], eg$Phi2[i], eg$L[i], eg$BP[i], eg$BM[i], eg$N[i])
dVM <- function (phi1, phi2, l, bp, bm, N)
{
#parameters
lp <- l #lambda plus
lm <- l #lambda minus
dt <- 0.01 #incremental time steps
nt <- 100
T <- nt/dt
r <- 1 #number of runs
a <- 1 #amplitude of stochasticity
#define variables
n <- numeric(T) #plus population density
m <- numeric(T) #minus population density
M <- numeric(T) #magnetization
x <- numeric(T) #l++ link
y <- numeric(T) #l+- link
z <- numeric(T) #l-- link
U <- array (dim = c(T, 22, 4)) #N * displacement vector array with T time steps, 22 possible interactions, 4 components
P <- matrix(nrow = T, ncol = 22) #probability matrix
S <- matrix(nrow=T, ncol=r)
#initialise variables
n[1] <- 0.5
m[1] <- 1 - n[1]
M[1] <- n[1] - m[1]
x[1] <- 5*n[1]*n[1]
z[1] <- 5*m[1]*m[1]
y[1] <- 2*5*m[1]*n[1]
L <- x[1]+y[1]+z[1] #total number of links
#set preference parameters
Bp <- bp*n[1]
Bm <- bm*m[1]
#defining a matrix sum function
Msum <- function(a,b)
{
s = 0
for (i in 1:22)
{
s <- s + a[i]*b[i]
}
return(s)
} ##Note: This can be vectorized
# Msum <- function(a,b)
# {
#   sum(a*b)
# }
for (i in 1:r)
{
for (t in 1:T)
{
if ((M[t] <= 1) & (M[t] >= -1) & (x[t] >= 0) & (y[t] >= 0) & (z[t] >= 0) & (x[t] <= L) & (y[t] <= L) & (z[t] <= L))
{
#first assign by width the component for each interaction
U[t, 1,] <- c(0,1,-1,0)
U[t, 2,] <- c(0,0,0,0)
U[t, 3,] <- c(0,0,0,0)
U[t, 4,] <- c(0,0,0,0)
U[t, 5,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 6,] <- c(0,-1,1,0)
U[t, 7,] <- c(0,0,0,0)
U[t, 8,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 9,] <- c(0,0,0,0)
U[t, 10,] <- c(0,0,0,0)
U[t, 11,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 12,] <- c(0,-1,0,1)
U[t, 13,] <- c(0,0,0,0)
U[t, 14,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
U[t, 15,] <- c(0,0,0,0)
U[t, 16,] <- c(0,0,0,0)
U[t, 17,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
U[t, 18,] <- c(0,1,0,-1)
U[t, 19,] <- c(0,0,0,0)
U[t, 20,] <- c(0,0,0,0)
U[t, 21,] <- c(0,0,0,0)
U[t, 22,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
#assign probabilities to each time step
P[t,1] <- (1 - Bp - Bm)*phi1*n[t]*m[t]*x[t]/(x[t]+y[t])
P[t,2] <- (1 - Bp - Bm)*phi1*n[t]**2*x[t]/(x[t]+y[t])
P[t,3] <- (1 - Bp - Bm)*(1-phi1)*n[t]*x[t]/(x[t]+y[t])
P[t,4] <- Bp*n[t]*x[t]/(x[t]+y[t])
P[t,5] <- Bm*n[t]*x[t]/(x[t]+y[t])
P[t,6] <- (1 - Bp - Bm)*phi2*n[t]**2*y[t]/(x[t]+y[t])
P[t,7] <- (1 - Bp - Bm)*phi2*n[t]*m[t]*y[t]/(x[t]+y[t])
P[t,8] <- (1 - Bp - Bm)*(1-phi2)*(1-lp)*n[t]*y[t]/(x[t]+y[t])
P[t,9] <- (1 - Bp - Bm)*(1-phi2)*lp*n[t]*y[t]/(x[t]+y[t])
P[t,10] <- Bp*y[t]/(x[t]+y[t])
P[t,11] <- Bm*y[t]/(x[t]+y[t])
P[t,12] <- (1 - Bp - Bm)*phi2*m[t]**2*y[t]/(z[t]+y[t])
P[t,13] <- (1 - Bp - Bm)*phi2*n[t]*m[t]*y[t]/(z[t]+y[t])
P[t,14] <- (1 - Bp - Bm)*(1-phi2)*(1-lm)*m[t]*y[t]/(z[t]+y[t])
P[t,15] <- (1 - Bp - Bm)*(1-phi2)*lm*m[t]*y[t]/(z[t]+y[t])
P[t,16] <-  Bm*y[t]/(z[t]+y[t])
P[t,17] <-  Bp*y[t]/(z[t]+y[t])
P[t,18] <- (1 - Bp - Bm)*phi1*n[t]*m[t]*z[t]/(z[t]+y[t])
P[t,19] <- (1 - Bp - Bm)*phi1*m[t]**2*z[t]/(z[t]+y[t])
P[t,20] <- (1 - Bp - Bm)*(1-phi1)*m[t]*z[t]/(z[t]+y[t])
P[t,21] <- Bm*m[t]*z[t]/(z[t]+y[t])
P[t,22] <- Bp*m[t]*z[t]/(z[t]+y[t])
if (t < T)
{
#displacement vector equations
M[t+1] <- M[t] + dt*Msum(U[t,,1],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,1]/N, sqrt(P[t,]))/sqrt(N)
x[t+1] <- x[t] + dt*Msum(U[t,,3],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,3]/N, sqrt(P[t,]))/sqrt(N)
y[t+1] <- y[t] + dt*Msum(U[t,,2],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,2]/N, sqrt(P[t,]))/sqrt(N)
z[t+1] <- z[t] + dt*Msum(U[t,,4],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,4]/N, sqrt(P[t,]))/sqrt(N)
n[t+1] <- (M[t+1]+1)/2
m[t+1] <- 1 - n[t+1]
}
}
else
{
if (t < T)
{
M[t+1] <- M[t]
n[t+1] <- n[t]
m[t+1] <- m[t]
x[t+1] <- x[t]
y[t+1] <- y[t]
z[t+1] <- z[t]
}
}
}
S[,i] <- M
}
return (mean(S[T,]))
}
eg <- expand.grid(
Phi1 = c(0, 0.2, 0.6),
Phi2 = c(0, 0.2, 0.6),
# varying some:
BP = seq(0, 1, by = 0.05),
BM = seq(0, 1, by = 0.05),
# holding some constant:
L = 0.3,
N = 30,
# Columns for outcomes:
out = NA
)
eg$out[i] <- dVM(eg$Phi1[i], eg$Phi2[i], eg$L[i], eg$BP[i], eg$BM[i], eg$N[i])
dVM <- function (phi1, phi2, l, bp, bm, N)
{
#parameters
lp <- l #lambda plus
lm <- l #lambda minus
dt <- 0.01 #incremental time steps
nt <- 100
T <- nt/dt
r <- 1 #number of runs
a <- 1 #amplitude of stochasticity
#define variables
n <- numeric(T) #plus population density
m <- numeric(T) #minus population density
M <- numeric(T) #magnetization
x <- numeric(T) #l++ link
y <- numeric(T) #l+- link
z <- numeric(T) #l-- link
U <- array (dim = c(T, 22, 4)) #N * displacement vector array with T time steps, 22 possible interactions, 4 components
P <- matrix(nrow = T, ncol = 22) #probability matrix
S <- matrix(nrow=T, ncol=r)
#initialise variables
n[1] <- 0.5
m[1] <- 1 - n[1]
M[1] <- n[1] - m[1]
x[1] <- 5*n[1]*n[1]
z[1] <- 5*m[1]*m[1]
y[1] <- 2*5*m[1]*n[1]
L <- x[1]+y[1]+z[1] #total number of links
#set preference parameters
Bp <- bp*n[1]
Bm <- bm*m[1]
#defining a matrix sum function
# Msum <- function(a,b)
# {
#   s = 0
#   for (i in 1:22)
#   {
#     s <- s + a[i]*b[i]
#   }
#   return(s)
# } ##Note: This can be vectorized
Msum <- function(a,b)
{
sum(a*b)
}
for (i in 1:r)
{
for (t in 1:T)
{
if ((M[t] <= 1) & (M[t] >= -1) & (x[t] >= 0) & (y[t] >= 0) & (z[t] >= 0) & (x[t] <= L) & (y[t] <= L) & (z[t] <= L))
{
#first assign by width the component for each interaction
U[t, 1,] <- c(0,1,-1,0)
U[t, 2,] <- c(0,0,0,0)
U[t, 3,] <- c(0,0,0,0)
U[t, 4,] <- c(0,0,0,0)
U[t, 5,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 6,] <- c(0,-1,1,0)
U[t, 7,] <- c(0,0,0,0)
U[t, 8,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 9,] <- c(0,0,0,0)
U[t, 10,] <- c(0,0,0,0)
U[t, 11,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 12,] <- c(0,-1,0,1)
U[t, 13,] <- c(0,0,0,0)
U[t, 14,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
U[t, 15,] <- c(0,0,0,0)
U[t, 16,] <- c(0,0,0,0)
U[t, 17,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
U[t, 18,] <- c(0,1,0,-1)
U[t, 19,] <- c(0,0,0,0)
U[t, 20,] <- c(0,0,0,0)
U[t, 21,] <- c(0,0,0,0)
U[t, 22,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
#assign probabilities to each time step
P[t,1] <- (1 - Bp - Bm)*phi1*n[t]*m[t]*x[t]/(x[t]+y[t])
P[t,2] <- (1 - Bp - Bm)*phi1*n[t]**2*x[t]/(x[t]+y[t])
P[t,3] <- (1 - Bp - Bm)*(1-phi1)*n[t]*x[t]/(x[t]+y[t])
P[t,4] <- Bp*n[t]*x[t]/(x[t]+y[t])
P[t,5] <- Bm*n[t]*x[t]/(x[t]+y[t])
P[t,6] <- (1 - Bp - Bm)*phi2*n[t]**2*y[t]/(x[t]+y[t])
P[t,7] <- (1 - Bp - Bm)*phi2*n[t]*m[t]*y[t]/(x[t]+y[t])
P[t,8] <- (1 - Bp - Bm)*(1-phi2)*(1-lp)*n[t]*y[t]/(x[t]+y[t])
P[t,9] <- (1 - Bp - Bm)*(1-phi2)*lp*n[t]*y[t]/(x[t]+y[t])
P[t,10] <- Bp*y[t]/(x[t]+y[t])
P[t,11] <- Bm*y[t]/(x[t]+y[t])
P[t,12] <- (1 - Bp - Bm)*phi2*m[t]**2*y[t]/(z[t]+y[t])
P[t,13] <- (1 - Bp - Bm)*phi2*n[t]*m[t]*y[t]/(z[t]+y[t])
P[t,14] <- (1 - Bp - Bm)*(1-phi2)*(1-lm)*m[t]*y[t]/(z[t]+y[t])
P[t,15] <- (1 - Bp - Bm)*(1-phi2)*lm*m[t]*y[t]/(z[t]+y[t])
P[t,16] <-  Bm*y[t]/(z[t]+y[t])
P[t,17] <-  Bp*y[t]/(z[t]+y[t])
P[t,18] <- (1 - Bp - Bm)*phi1*n[t]*m[t]*z[t]/(z[t]+y[t])
P[t,19] <- (1 - Bp - Bm)*phi1*m[t]**2*z[t]/(z[t]+y[t])
P[t,20] <- (1 - Bp - Bm)*(1-phi1)*m[t]*z[t]/(z[t]+y[t])
P[t,21] <- Bm*m[t]*z[t]/(z[t]+y[t])
P[t,22] <- Bp*m[t]*z[t]/(z[t]+y[t])
if (t < T)
{
#displacement vector equations
M[t+1] <- M[t] + dt*Msum(U[t,,1],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,1]/N, sqrt(P[t,]))/sqrt(N)
x[t+1] <- x[t] + dt*Msum(U[t,,3],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,3]/N, sqrt(P[t,]))/sqrt(N)
y[t+1] <- y[t] + dt*Msum(U[t,,2],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,2]/N, sqrt(P[t,]))/sqrt(N)
z[t+1] <- z[t] + dt*Msum(U[t,,4],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,4]/N, sqrt(P[t,]))/sqrt(N)
n[t+1] <- (M[t+1]+1)/2
m[t+1] <- 1 - n[t+1]
}
}
else
{
if (t < T)
{
M[t+1] <- M[t]
n[t+1] <- n[t]
m[t+1] <- m[t]
x[t+1] <- x[t]
y[t+1] <- y[t]
z[t+1] <- z[t]
}
}
}
S[,i] <- M
}
return (mean(S[T,]))
}
eg <- expand.grid(
Phi1 = c(0, 0.2, 0.6),
Phi2 = c(0, 0.2, 0.6),
# varying some:
BP = seq(0, 1, by = 0.05),
BM = seq(0, 1, by = 0.05),
# holding some constant:
L = 0.3,
N = 30,
# Columns for outcomes:
out = NA
)
eg$out[i] <- dVM(eg$Phi1[i], eg$Phi2[i], eg$L[i], eg$BP[i], eg$BM[i], eg$N[i])
for (i in 1:nrow(eg))
{
eg$out[i] <- dVM(eg$Phi1[i], eg$Phi2[i], eg$L[i], eg$BP[i], eg$BM[i], eg$N[i])
}
ptm <- proc.time()
for (i in 1:100)
{
eg$out[i] <- dVM(eg$Phi1[i], eg$Phi2[i], eg$L[i], eg$BP[i], eg$BM[i], eg$N[i])
}
proc.time() - ptm
ptm <- proc.time()
eg$out <- sapply(1:100, function(i){
dVM(eg$Phi1[i], eg$Phi2[i], eg$L[i], eg$BP[i], eg$BM[i], eg$N[i])
})
proc.time() - ptm
proc.time()
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("ci")
install.packages("cli")
library(tidyverse)
library(stringr)
library(compiler)
#### correlations -----
setwd("D:\\Github\\Projects\\Ongoing\\Tamal\\Agent_simulations\\replication3")
source("../plot_theme.R")
correlPlot <- function(key)
{
filz <- list.files(".", paste0(key, "\\d.csv"))
dfList <- lapply(filz, read_csv, lazy = F)
dPos <- lapply(dfList, function(df){
df %>% group_by(pos) %>%
summarise(actDens = cor(density, activationLevel, method = "spearman"),
actDiv = cor(divTime, activationLevel, method = "spearman"),
divDens = cor(density, divTime, method = "spearman"))
}) %>% reduce(merge, by = "pos", all = T)
dPos <- dPos %>%
mutate(actDensMean = dPos %>% select(contains("actDens")) %>% apply(1, mean, na.rm = T),
actDensSd = dPos %>% select(contains("actDens")) %>% apply(1, sd, na.rm = T),
actDivMean = dPos %>% select(contains("actDiv")) %>% apply(1, mean, na.rm = T),
actDivSd = dPos %>% select(contains("actDiv")) %>% apply(1, sd, na.rm = T),
divDensMean = dPos %>% select(contains("divDens")) %>% apply(1, mean, na.rm = T),
divDensSd = dPos %>% select(contains("divDens")) %>% apply(1, sd, na.rm = T))
dPos <- dPos %>% select(pos, contains("Mean"), contains("Sd"))
ggplot(dPos, aes(x = actDensMean)) + geom_histogram(aes(y = ..count../sum(..count..))) +
theme_Publication() + labs(x = "\u03c1(Activation Level, Density)",
title = "Position-wise correlation")
ggsave(paste0(key, "_posWiseActDens.png"), width = 5.5, height = 5)
dTime <- lapply(dfList, function(df){
df %>% group_by(step) %>%
summarise(actDens = cor(density, activationLevel, method = "spearman"),
actDiv = cor(divTime, activationLevel, method = "spearman"),
divDens = cor(density, divTime, method = "spearman"),
timeStep = unique(step),
globalDens = length(pos)/10000,
numCells = length(pos))
}) %>% reduce(merge, by = "timeStep", all = T)
dTime <- dTime %>%
mutate(actDensMean = dTime %>% select(contains("actDens")) %>% apply(1, mean, na.rm = T),
actDensSd = dTime %>% select(contains("actDens")) %>% apply(1, sd, na.rm = T),
actDivMean = dTime %>% select(contains("actDiv")) %>% apply(1, mean, na.rm = T),
actDivSd = dTime %>% select(contains("actDiv")) %>% apply(1, sd, na.rm = T),
divDensMean = dTime %>% select(contains("divDens")) %>% apply(1, mean, na.rm = T),
divDensSd = dTime %>% select(contains("divDens")) %>% apply(1, sd, na.rm = T),
globalDensMean = dTime %>% select(contains("globalDens")) %>% apply(1, mean, na.rm = T),
globalDensSd = dTime %>% select(contains("globalDens")) %>% apply(1, sd, na.rm = T),
numCellsMean = dTime %>% select(contains("numCells")) %>% apply(1, mean, na.rm = T),
numCellsSd = dTime %>% select(contains("numCells")) %>% apply(1, sd, na.rm = T))
dTime <- dTime %>% select(timeStep, contains("Mean"), contains("Sd"))
dTimeMean <- dTime %>% select(timeStep, contains("Mean")) %>%
gather(key = "Metric", value = "Avg", -timeStep) %>% mutate(Metric = str_remove(Metric, "Mean"))
dTimeSd <- dTime %>% select(timeStep, contains("Sd")) %>%
gather(key = "Metric", value = "Sd", -timeStep) %>% mutate(Metric = str_remove(Metric, "Sd"))
dTimeGathered <- merge(dTimeMean, dTimeSd, by = c("timeStep", "Metric"), all = T)
metrics <- c("actDens", "actDiv", "divDens", "globalDens", "numCells")
metricKey <- c("\u03c1(Activation Level, Density)", "\u03c1(Activation Level, Division Time)",
"\u03c1(Division Time, Density)", "Global Density", "Number of Cells")
names(metricKey) <- metrics
sapply(metrics, function(metric){
ggplot(dTimeGathered %>% filter(Metric == metric), aes(x = Avg)) +
geom_histogram(aes(y = ..count../sum(..count..))) +
theme_Publication() + labs(x = metricKey[metric], y = "Frequency",
title = "Time-wise correlation")
ggsave(paste0(key, "_timeWise", metric, ".png"), width = 5.5, height = 5)
ggplot(dTimeGathered %>% filter(Metric == metric), aes(x = timeStep, y = Avg)) +
geom_point() + geom_line() +
geom_errorbar(aes(ymin = Avg - Sd, ymax = Avg + Sd)) +
theme_Publication() + labs(y = metricKey[metric],
x = "Time", title ="Time-wise Correlation")
ggsave(paste0(key, "_timeWise", metric, "Scatter.png"), width = 5.5, height = 5)
})
}
setwd("repeats/")
keys <- paste0("data_", c(2:6, 8, 10, 15, 20))
sapply(keys, correlPlot)
x <- runif(4*100000)
x <- matrix(x, ncol = 4)
d <- dist(x)
hclust(d)
hclust(dist(x))
install.packages("cluster")
library(cluster)
?clara
clara(x)
clara(x, k = 2)
p <- clara(x, k = 2)
summary(p)
p1 <- prcomp(x)
View(p1)
d <- p1$rotation %>% data.frame %>% set_names(paste0("PC", 1:4)) %>% mutate(Cluster = p$clustering)
d <- p1$x %>% data.frame %>% set_names(paste0("PC", 1:4)) %>% mutate(Cluster = p$clustering)
?prcomp
p1
ggplot(d, aes(x = PC1, y = PC2, color = Cluster)) + geom_point()
kmeans(x)
kmeans(x, centers = 2)
a <- agnes(x)
install.packages("fastclust")
install.packages("fastcluster")
library(fastcluster)
hclust.vector(x)
h <- hclust.vector(x)
ggplot(d, aes(x = PC1, y = PC2)) + geom_density_2d()
setwd("D:/Github/Rpackages/miscFuncs")
